{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Chapter 30 Introduction to Queing Theory Queing in a nutshell \u0e44\u0e27\u0e49\u0e04\u0e2d\u0e22\u0e1a\u0e2d\u0e01\u0e40\u0e27\u0e25\u0e32\u0e17\u0e35\u0e48\u0e43\u0e0a\u0e49\u0e43\u0e19\u0e41\u0e15\u0e48\u0e25\u0e30 Queue Many jobs shares system resources One job at anytime others wait Queing Notation Components of a Queue 1. Arrival Process Interarrival times \\(\\tau_j=t_j-t_{j-1}\\) (\u0e40\u0e27\u0e25\u0e32\u0e2b\u0e48\u0e32\u0e07\u0e01\u0e31\u0e19\u0e40\u0e17\u0e48\u0e32\u0e44\u0e2b\u0e23\u0e48) \\(\\tau_j=t_j-t_{j-1}\\) assumed to be Independent and Identically Distributed (IID) Piosson Arrival is common and interarrival times are IID and Exponentially distributed Also Erlang and Hyperexponential used 2. Service Time Distribution Ex. Service Time = Time each student spends at the terminal Assumed that Service time are random variable and IID Exponential Distribution is commonly used Erlang, hyperexponential and general can also be used 3. Number of Servers (\u0e15\u0e31\u0e27\u0e1b\u0e23\u0e30\u0e21\u0e27\u0e25\u0e1c\u0e25) Part of same queing system Identical ex any student to any terminal if not identical then group identical with seperate queue so each group is a queing system 4. System Capacity Number of students can stay in the room (buffer) Capacity is finite (for most system) but if large, easier to assume infinite 5. Population Size Number of potential student who can use the computer Population is finite (for most system) again, if large, it's easier to assume infinite 6. Service Discipline Order which the students are served FCFS : First Come First Served LCFS : Last Come First Served LCFS-PR : Last Come First Serve with Preempt and Resume RR : Round Robin PS : Processing Sharing (Small Quantum) IS : Infinite Server = Fixed delay SPT : Shorting Processing Time first SRPT : Shorting remaining Processing time first SEPT : Shortest Expected Processing Time first SERPT : Shortest Expected Remaining Processing Time first LVFS : Loudest Voice First Served Kendall notation \\(A/S/m/B/K/SD\\) \\(A\\) : interarrival time distribution \\(S\\) : Service time distribution \\(A\\) and \\(S\\) Can be denoted by one-letter symbol as follows \\(M\\) : Exponential \\(E_k\\) : Erlang with parameter k \\(H_k\\) : Hyperexponential with parameter k \\(D\\) : Deterministic \\(G\\) : General \\(m\\) : number of servers \\(B\\) : number of buffers \\(K\\) : Population size \\(SD\\) : Service discipline Exponential Distribution Probability Density Function (pdf) \\(f(x)=\\frac{1}{a}e^{\\frac{-x}{a}}\\) Cumulative Distribution Function (cdf) \\(F(x) = P(X<x) = \\int_{0}^{x}f(x)dx=1-e^{-x/a}\\) Mean : \\(a\\) Variance : \\(a^2\\) Coefficient of variation (CV) = SD / mean = 1 Memoryless \u0e44\u0e21\u0e48\u0e2a\u0e19\u0e2d\u0e14\u0e35\u0e15 Expected time of next arrival is always \\(a\\) Erlang Distribution Sum of \\(k\\) exponential random variables \\(X=\\sum_{i=1}^k x_i\\) where \\(x_i\\) ~ exponential pdf \\(f(x) = \\frac{x^{k-1}e^{-x/a}}{(k-1)! a^k}\\) Expected Value : \\(ak\\) Variance : \\(a^2k\\) CV : \\(\\frac{1}{\\sqrt{k}}\\) Hyper-Exponential Distribution (\u0e04\u0e37\u0e2d\u0e44\u0e23\u0e44\u0e21\u0e48\u0e23\u0e39\u0e49\u0e2d\u0e48\u0e32\u0e19\u0e01\u0e47\u0e44\u0e21\u0e48\u0e23\u0e39\u0e49\u0e40\u0e23\u0e37\u0e48\u0e2d\u0e07) The variable takes \\(i^{th}\\) value with prob \\(p_i\\) Hyper Exponential \\(x_i\\) is exponentially distributed with mean \\(a_i\\) Higher variance then exponential (CV > 1) Group Arrivals/Service Buld arrival/service \\(M^{x}\\) : \\(x\\) represents the group size \\(G^{x}\\) : \\(x\\) a bulk arrival or service process with general inter-group times Key Variables used in Analysis of Single Queue \\(E\\) : Expected (mean) \\(\\lambda\\) : arrival rate = \\(1/E[\\tau]\\) \\(s\\) : Service time per job \\(\\mu\\) : Mean of service rate per server = \\(1/E[s]\\) \\(n\\) : queue length \\(n_q\\) : Number of jobs waiting \\(n_s\\) : Number of jobs reqceiving service \\(r\\) : response time = time waiting + time receiving service \\(w\\) : waiting time = Time between arrival and beginning of service Rules of all Queues Rules that apply to G/G/m Queues 1. Stability Condition : \\(\\lambda < m\\mu\\) \\(\\lambda\\) : Mean arrival rate = \\(1/E[\\tau]\\) \\(m\\) : number of servers \\(\\mu\\) : Mean service rate per server = \\(1/E[s]\\) finite-population or finite-buffer always stable infinite queue = instability 2. Number in System VS Number in Queue : \\(n=n_q+n_s\\) \\(n_q\\) : Number in Queue \\(n_s\\) : Number Receiving service \\(n\\) : Number of Jobs Since it random \\(E[n]=E[n_q]+E[n_s]\\) 3. Number VS Time if jobs are not lost due to in sufficient buffers Mean number of jobs in the system = arrival rate * mean response time = \\(\\lambda r\\) Mean number of jobs in the queue = arrival rate * mean waiting time = \\(\\lambda w\\) 4. Time in System VS time in Queue \\(r=w+s\\) \\(r\\) , \\(w\\) , \\(s\\) are random variables \\(E[r] = E[w] + E[s]\\) if service rate is independent of number of jobs in the queue \\(CV(w,s)=0\\) \\(Var[r] = Var[w] + Var[s]\\) \u0e17\u0e35\u0e48\u0e40\u0e2b\u0e25\u0e37\u0e2d\u0e40\u0e14\u0e35\u0e4b\u0e22\u0e27\u0e04\u0e48\u0e2d\u0e22\u0e21\u0e32\u0e15\u0e48\u0e2d","title":"Chapter 30"},{"location":"#chapter-30-introduction-to-queing-theory","text":"","title":"Chapter 30 Introduction to Queing Theory"},{"location":"#queing-in-a-nutshell","text":"\u0e44\u0e27\u0e49\u0e04\u0e2d\u0e22\u0e1a\u0e2d\u0e01\u0e40\u0e27\u0e25\u0e32\u0e17\u0e35\u0e48\u0e43\u0e0a\u0e49\u0e43\u0e19\u0e41\u0e15\u0e48\u0e25\u0e30 Queue Many jobs shares system resources One job at anytime others wait","title":"Queing in a nutshell"},{"location":"#queing-notation","text":"Components of a Queue","title":"Queing Notation"},{"location":"#1-arrival-process","text":"Interarrival times \\(\\tau_j=t_j-t_{j-1}\\) (\u0e40\u0e27\u0e25\u0e32\u0e2b\u0e48\u0e32\u0e07\u0e01\u0e31\u0e19\u0e40\u0e17\u0e48\u0e32\u0e44\u0e2b\u0e23\u0e48) \\(\\tau_j=t_j-t_{j-1}\\) assumed to be Independent and Identically Distributed (IID) Piosson Arrival is common and interarrival times are IID and Exponentially distributed Also Erlang and Hyperexponential used","title":"1. Arrival Process"},{"location":"#2-service-time-distribution","text":"Ex. Service Time = Time each student spends at the terminal Assumed that Service time are random variable and IID Exponential Distribution is commonly used Erlang, hyperexponential and general can also be used","title":"2. Service Time Distribution"},{"location":"#3-number-of-servers","text":"Part of same queing system Identical ex any student to any terminal if not identical then group identical with seperate queue so each group is a queing system","title":"3. Number of Servers (\u0e15\u0e31\u0e27\u0e1b\u0e23\u0e30\u0e21\u0e27\u0e25\u0e1c\u0e25)"},{"location":"#4-system-capacity","text":"Number of students can stay in the room (buffer) Capacity is finite (for most system) but if large, easier to assume infinite","title":"4. System Capacity"},{"location":"#5-population-size","text":"Number of potential student who can use the computer Population is finite (for most system) again, if large, it's easier to assume infinite","title":"5. Population Size"},{"location":"#6-service-discipline","text":"Order which the students are served FCFS : First Come First Served LCFS : Last Come First Served LCFS-PR : Last Come First Serve with Preempt and Resume RR : Round Robin PS : Processing Sharing (Small Quantum) IS : Infinite Server = Fixed delay SPT : Shorting Processing Time first SRPT : Shorting remaining Processing time first SEPT : Shortest Expected Processing Time first SERPT : Shortest Expected Remaining Processing Time first LVFS : Loudest Voice First Served","title":"6. Service Discipline"},{"location":"#kendall-notation-asmbksd","text":"\\(A\\) : interarrival time distribution \\(S\\) : Service time distribution \\(A\\) and \\(S\\) Can be denoted by one-letter symbol as follows \\(M\\) : Exponential \\(E_k\\) : Erlang with parameter k \\(H_k\\) : Hyperexponential with parameter k \\(D\\) : Deterministic \\(G\\) : General \\(m\\) : number of servers \\(B\\) : number of buffers \\(K\\) : Population size \\(SD\\) : Service discipline","title":"Kendall notation \\(A/S/m/B/K/SD\\)"},{"location":"#exponential-distribution","text":"Probability Density Function (pdf) \\(f(x)=\\frac{1}{a}e^{\\frac{-x}{a}}\\) Cumulative Distribution Function (cdf) \\(F(x) = P(X<x) = \\int_{0}^{x}f(x)dx=1-e^{-x/a}\\) Mean : \\(a\\) Variance : \\(a^2\\) Coefficient of variation (CV) = SD / mean = 1 Memoryless \u0e44\u0e21\u0e48\u0e2a\u0e19\u0e2d\u0e14\u0e35\u0e15 Expected time of next arrival is always \\(a\\)","title":"Exponential Distribution"},{"location":"#erlang-distribution","text":"Sum of \\(k\\) exponential random variables \\(X=\\sum_{i=1}^k x_i\\) where \\(x_i\\) ~ exponential pdf \\(f(x) = \\frac{x^{k-1}e^{-x/a}}{(k-1)! a^k}\\) Expected Value : \\(ak\\) Variance : \\(a^2k\\) CV : \\(\\frac{1}{\\sqrt{k}}\\)","title":"Erlang Distribution"},{"location":"#hyper-exponential-distribution","text":"(\u0e04\u0e37\u0e2d\u0e44\u0e23\u0e44\u0e21\u0e48\u0e23\u0e39\u0e49\u0e2d\u0e48\u0e32\u0e19\u0e01\u0e47\u0e44\u0e21\u0e48\u0e23\u0e39\u0e49\u0e40\u0e23\u0e37\u0e48\u0e2d\u0e07) The variable takes \\(i^{th}\\) value with prob \\(p_i\\) Hyper Exponential \\(x_i\\) is exponentially distributed with mean \\(a_i\\) Higher variance then exponential (CV > 1)","title":"Hyper-Exponential Distribution"},{"location":"#group-arrivalsservice","text":"Buld arrival/service \\(M^{x}\\) : \\(x\\) represents the group size \\(G^{x}\\) : \\(x\\) a bulk arrival or service process with general inter-group times","title":"Group Arrivals/Service"},{"location":"#key-variables-used-in-analysis-of-single-queue","text":"\\(E\\) : Expected (mean) \\(\\lambda\\) : arrival rate = \\(1/E[\\tau]\\) \\(s\\) : Service time per job \\(\\mu\\) : Mean of service rate per server = \\(1/E[s]\\) \\(n\\) : queue length \\(n_q\\) : Number of jobs waiting \\(n_s\\) : Number of jobs reqceiving service \\(r\\) : response time = time waiting + time receiving service \\(w\\) : waiting time = Time between arrival and beginning of service","title":"Key Variables used in Analysis of Single Queue"},{"location":"#rules-of-all-queues","text":"","title":"Rules of all Queues"},{"location":"#rules-that-apply-to-ggm-queues","text":"","title":"Rules that apply to G/G/m Queues"},{"location":"#1-stability-condition-lambda-mmu","text":"\\(\\lambda\\) : Mean arrival rate = \\(1/E[\\tau]\\) \\(m\\) : number of servers \\(\\mu\\) : Mean service rate per server = \\(1/E[s]\\) finite-population or finite-buffer always stable infinite queue = instability","title":"1. Stability Condition : \\(\\lambda &lt; m\\mu\\)"},{"location":"#2-number-in-system-vs-number-in-queue-nn_qn_s","text":"\\(n_q\\) : Number in Queue \\(n_s\\) : Number Receiving service \\(n\\) : Number of Jobs Since it random \\(E[n]=E[n_q]+E[n_s]\\)","title":"2. Number in System VS Number in Queue : \\(n=n_q+n_s\\)"},{"location":"#3-number-vs-time","text":"if jobs are not lost due to in sufficient buffers Mean number of jobs in the system = arrival rate * mean response time = \\(\\lambda r\\) Mean number of jobs in the queue = arrival rate * mean waiting time = \\(\\lambda w\\)","title":"3. Number VS Time"},{"location":"#4-time-in-system-vs-time-in-queue-rws","text":"\\(r\\) , \\(w\\) , \\(s\\) are random variables \\(E[r] = E[w] + E[s]\\) if service rate is independent of number of jobs in the queue \\(CV(w,s)=0\\) \\(Var[r] = Var[w] + Var[s]\\) \u0e17\u0e35\u0e48\u0e40\u0e2b\u0e25\u0e37\u0e2d\u0e40\u0e14\u0e35\u0e4b\u0e22\u0e27\u0e04\u0e48\u0e2d\u0e22\u0e21\u0e32\u0e15\u0e48\u0e2d","title":"4. Time in System VS time in Queue \\(r=w+s\\)"}]}